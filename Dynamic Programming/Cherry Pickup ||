// DP approach
// class Solution {
//     public int func(int i, int j1, int j2, int n, int m , int[][] grid, int[][][] dp){
//         if(j1<0 || j2<0 || j1>=m || j2>=m){
//             return (int)(-1e8);
//         }
//         if(i==n-1){
//             if(j1==j2) return grid[i][j1];
//             else{
//                 return grid[i][j1]+grid[i][j2];
//             }
//         }
//         if(dp[i][j1][j2]!=-1) return dp[i][j1][j2];
//         int max=(int)(-1e8);
//         for(int dj1=-1;dj1<=1;dj1++){
//             for(int dj2=-1;dj2<=1;dj2++){
//                 int value=0;
//                 if(j1==j2){
//                     value=grid[i][j1];
//                 }
//                 else {
//                     value=grid[i][j1]+grid[i][j2];
//                 }
//                 value+=func(i+1,j1+dj1,j2+dj2,n,m,grid,dp);
//                 max=Math.max(max,value);
//             }
//         }
//             return dp[i][j1][j2]=max;
//     }
//     public int cherryPickup(int[][] grid) {
//         int rows=grid.length;
//         int cols=grid[0].length;
//         int[][][] dp=new int[rows][cols][cols];
//         for (int i = 0; i < rows; i++) {
//     for (int j = 0; j < cols; j++) {
//         for (int k = 0; k < cols; k++) {
//             dp[i][j][k] = -1;
//         }
//     }
// }
//         return func(0,0,cols-1,rows,cols,grid,dp);
//     }
// }

// Tabulation approach

// class Solution {

//     public int cherryPickup(int[][] grid) {
//         int n = grid.length;
//         int m = grid[0].length;
//         int[][][] dp = new int[n][m][m];
//         for (int j1 = 0; j1 < m; j1++) {
//             for (int j2 = 0; j2 < m; j2++) {
//                 if (j1 == j2)
//                     dp[n - 1][j1][j2] = grid[n - 1][j1];
//                 else
//                     dp[n - 1][j1][j2] = grid[n - 1][j1] + grid[n - 1][j2];
//             }
//         }
//         for (int i = n - 2; i >= 0; i--) {
//             for (int j1 = 0; j1 < m; j1++) {
//                 for (int j2 = 0; j2 < m; j2++) {
//                     int max = (int) (-1e8);
//                     for (int dj1 = -1; dj1 <= 1; dj1++) {
//                         for (int dj2 = -1; dj2 <= 1; dj2++) {
//                             int value = 0;
//                             if (j1 == j2) {
//                                 value = grid[i][j1];
//                             } else {
//                                 value = grid[i][j1] + grid[i][j2];
//                             }
//                             if(j1+dj1>=0 && j1+dj1<m && j2+dj2>=0 && j2+dj2<m)
//                             value +=dp[i+1][j1+dj1][j2+dj2];
//                             else value+=(int)(-1e8);
//                             max = Math.max(max, value);
//                         }
//                     }
//                     dp[i][j1][j2] = max;
//                 }
//             }
//         }
//         return dp[0][0][m-1];
//     }
// }

// Space optimization of DP Tabulation approach

class Solution {

    public int cherryPickup(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int[][] prev = new int[m][m];
        for (int j1 = 0; j1 < m; j1++) {
            for (int j2 = 0; j2 < m; j2++) {
                if (j1 == j2)
                    prev[j1][j2] = grid[n - 1][j1];
                else
                    prev[j1][j2] = grid[n - 1][j1] + grid[n - 1][j2];
            }
        }
        for (int i = n - 2; i >= 0; i--) {
            int[][] curr = new int[m][m];
            for (int j1 = 0; j1 < m; j1++) {
                for (int j2 = 0; j2 < m; j2++) {
                    int max = (int) (-1e8);
                    for (int dj1 = -1; dj1 <= 1; dj1++) {
                        for (int dj2 = -1; dj2 <= 1; dj2++) {
                            int value = 0;
                            if (j1 == j2) {
                                value = grid[i][j1];
                            } else {
                                value = grid[i][j1] + grid[i][j2];
                            }
                            if(j1+dj1>=0 && j1+dj1<m && j2+dj2>=0 && j2+dj2<m)
                            value +=prev[j1+dj1][j2+dj2];
                            else value+=(int)(-1e8);
                            max = Math.max(max, value);
                        }
                    }
                    curr[j1][j2] = max;
                }
            }
            prev=curr;
        }
        return prev[0][m-1];
    }
}
