import java.util.*;
public class Solution {
    public static int func(int[][] dp, int[] profit , int[] weight, int ind, int w){
        if(ind==0){
            if(w>=weight[0]){
                return (w/weight[0])*profit[0];
            }
            else return 0;
        }
        if(dp[ind][w]!=-1) return dp[ind][w];
        int notTake=0+func(dp, profit , weight , ind-1, w);
        int take=(int)-1e9;
        if(w>=weight[ind]){
            take=profit[ind]+func(dp,profit,weight,ind,w-weight[ind]);
        }

        return dp[ind][w]=Math.max(take,notTake);
    }
    public static int unboundedKnapsack(int n, int w, int[] profit, int[] weight) {
        // Write your code here.
        int[][] dp=new int[n][w+1];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
        return func(dp,profit,weight,n-1,w);
    }
}
