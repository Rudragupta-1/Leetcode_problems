// DP approach

class Solution {
    public int rob(int[] nums) {
        int n=nums.length;
        int dp[]=new int[n];
        Arrays.fill(dp,-1);
        return func(n-1,nums,dp);
    }
    public int func(int index, int[] nums,int[] dp){
        if(index==0) return nums[index];
        if(index<0) return 0;
        if(dp[index]!=-1) return dp[index];
        int pick=nums[index]+func(index-2,nums,dp);
        int notPick=0+func(index-1,nums,dp);
        return dp[index]=Math.max(pick,notPick);
    }
}


// Let's do DP Tabulation

class Solution {
    public int rob(int[] nums) {
        int n=nums.length;
        int[] dp=new int[n];
        dp[0]=nums[0];
        for(int i=1;i<nums.length;i++){
            int take=nums[i];if(i>1) take=nums[i]+dp[i-2];
            int notTake=0+dp[i-1];
            dp[i]=Math.max(take,notTake);
        }
        return dp[n-1];
    }
}

// Let's do space optimization

class Solution {
    public int rob(int[] nums) {
        int n=nums.length;
        int prev2=nums[0];
        int prev1=0;
        for(int i=1;i<nums.length;i++){
            int take=nums[i];if(i>1) take=nums[i]+prev1;
            int notTake=0+prev2;
            int curr=Math.max(take,notTake);
            prev1=prev2;
            prev2=curr;
        }
        return prev2;
    }
}
