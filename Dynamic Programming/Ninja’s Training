// DP Approach
import java.util.*;
public class Solution {
    public static int ninjaTraining(int n, int points[][]) {
        
        // Write your code here..
        int dp[][]=new int[n][4];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return func(n-1, 3, points, dp);
    }
    
    public static int func(int days, int last, int points[][], int[][] dp) {
        if (days == 0) {
            int max = 0;
            for (int i = 0; i < 3; i++) {
                if (i != last) {
                    max = Math.max(max, points[0][i]);
                }
            }
            return max;
        }
        
        if (dp[days][last] != -1) return dp[days][last];
        
        int max = 0;
        for (int i = 0; i < 3; i++) {
            if (i != last) {
                int point = points[days][i] + func(days - 1, i, points, dp);
                max = Math.max(max, point);
            }
        }
        return dp[days][last] = max;
    }
}
