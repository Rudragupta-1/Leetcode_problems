// This is the dp code.

// import java.util.* ;
// import java.io.*; 
// public class Solution {
//     public static int frogJump(int n, int arr[]) {
//         int dp[]=new int[n];
//         Arrays.fill(dp,-1);
//         return func(n-1,arr,dp);
//     }
//     public static int func(int n, int[] arr, int[] dp){
//         if(dp[n]!=-1) return dp[n];
//         if(n==0) return 0;
//         int left=func(n-1,arr,dp)+Math.abs(arr[n]-arr[n-1]);
//         int right=Integer.MAX_VALUE;
//         if(n>1){
//             right=func(n-2,arr,dp)+Math.abs(arr[n]-arr[n-2]);
//         }
//         return dp[n]= Math.min(left,right);
//     }
// }


// This is the dp space optimized code 
import java.util.* ;
import java.io.*; 
public class Solution {
    public static int frogJump(int n, int arr[]) {
        int prev2=0;
        int prev1=0;
        for(int i=1;i<n;i++){
            int left=prev1+Math.abs(arr[i]-arr[i-1]);
            int right=Integer.MAX_VALUE;
        if(i>1){
            right=prev2+Math.abs(arr[i]-arr[i-2]);
        }
        int curr=Math.min(left,right);
        prev2=prev1;
        prev1=curr;
        }
        return prev1;
    }
   
}
