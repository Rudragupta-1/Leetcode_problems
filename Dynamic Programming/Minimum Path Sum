// This is the DP Solution.

// class Solution {
//     public int func(int n, int m, int[][] grid, int[][] dp) {
//         if (n == 0 && m == 0)
//             return grid[n][m];
//         if (n < 0 || m < 0)
//             return Integer.MAX_VALUE;
//         if (dp[n][m] != -1)
//             return dp[n][m];
//         int up = func(n - 1, m, grid, dp);

//         int left = func(n, m - 1, grid, dp);

//         return dp[n][m] = grid[n][m] + Math.min(up, left);
//     }

//     public int minPathSum(int[][] grid) {
//         int n = grid.length;
//         int m = grid[0].length;
//         int[][] dp = new int[n][m];
//         for (int[] row : dp) {
//             Arrays.fill(row, -1);
//         }
//         return func(n - 1, m - 1, grid, dp);
//     }
// }

// This is the tabulation approach of DP.

// class Solution {
//     public int minPathSum(int[][] grid) {
//         int n = grid.length;
//         int m = grid[0].length;
//         int[][] dp = new int[n][m];
//         for (int i = 0; i < n; i++) {
//             for (int j = 0; j < m; j++) {
//                 if (i == 0 && j == 0)
//                     dp[i][j] = grid[i][j];
//                     else{
//                 int up = Integer.MAX_VALUE;
//                 int left =Integer.MAX_VALUE;
//                 if (i > 0)
//                     up = dp[i - 1][j]+grid[i][j];
//                 if (j > 0)
//                     left = dp[i][j - 1]+grid[i][j];

//                 dp[i][j] = Math.min(up, left);
//             }
//             }
//         }
//         return dp[n - 1][m - 1];
//     }
// }


// This is the space optimised approach 

class Solution {
    public int minPathSum(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int[] prev=new int[m];
        for (int i = 0; i < n; i++) {
            int[] curr=new int[m];
            for (int j = 0; j < m; j++) {
                if (i == 0 && j == 0)
                    curr[j] = grid[i][j];
                    else{
                int up = Integer.MAX_VALUE;
                int left =Integer.MAX_VALUE;
                if (i > 0)
                    up = prev[j]+grid[i][j];
                if (j > 0)
                    left = curr[j - 1]+grid[i][j];

                curr[j] = Math.min(up, left);
            }
            }
            prev=curr;
        }
        return prev[m-1];
    }
}
