class Solution {
    public int func(int n , int m , int[][] obstacleGrid,int[][] dp){
        if(n==0 && m==0) return 1;
        if(n<0 || m<0) return 0;
        if(obstacleGrid[n][m]==1){
            return 0;
        }
        if(dp[n][m]!=-1) return dp[n][m];
        return dp[n][m]=func(n-1,m,obstacleGrid,dp)+func(n,m-1,obstacleGrid,dp);
    }
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        if(obstacleGrid[0][0]==1) return 0;
        int n=obstacleGrid.length;
        int m=obstacleGrid[0].length;
        int[][] dp=new int[n][m];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
        return func(obstacleGrid.length-1,obstacleGrid[0].length-1, obstacleGrid,dp);
    }
}
