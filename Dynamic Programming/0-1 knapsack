// DP approach
import java.util.* ;
import java.io.*; 

public class Solution{
    static int func( int index, int[] weight, int[] value, int maxWeight,int[][] dp){
        if(index==0){
            if(weight[0]<=maxWeight){
                return value[0];
            }
            return 0;
        }
        if(dp[index][maxWeight]!=-1) return dp[index][maxWeight];
        int notPick=0+func(index-1,weight,value,maxWeight,dp);
        int pick=Integer.MIN_VALUE;
        if(weight[index]<=maxWeight){
            pick=value[index]+func(index-1,weight,value,maxWeight-weight[index],dp);
        }
        return dp[index][maxWeight]=Math.max(pick,notPick);
    } 
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
            int[][] dp=new int[n][maxWeight+1];
            for(int[] row:dp){
                Arrays.fill(row,-1);
            }
            return func(n-1,weight,value,maxWeight,dp);

    }
}

// Tabulation 
import java.util.* ;
import java.io.*; 

public class Solution{
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
            int[][] dp=new int[n][maxWeight+1];
            for(int w=weight[0];w<=maxWeight;w++){
                dp[0][w]=value[0];
            }
            for(int index=1;index<n;index++){
                for(int j=0;j<=maxWeight;j++){
                    int notPick=0+dp[index-1][j];
                    int pick=Integer.MIN_VALUE;
                    if(weight[index]<=j){
                        pick=value[index]+dp[index-1][j-weight[index]];
                    }
                    dp[index][j]=Math.max(pick,notPick);
                }
            }
            return dp[n-1][maxWeight];
    }
}

// Space optimization
import java.util.* ;
import java.io.*; 

public class Solution{
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {

            int[] prev=new int[maxWeight+1];

            for(int w=weight[0];w<=maxWeight;w++){
                prev[w]=value[0];
            }
            for(int index=1;index<n;index++){
                 int[] curr=new int[maxWeight+1];
                for(int j=0;j<=maxWeight;j++){
                    int notPick=0+prev[j];
                    int pick=Integer.MIN_VALUE;
                    if(weight[index]<=j){
                        pick=value[index]+prev[j-weight[index]];
                    }
                    curr[j]=Math.max(pick,notPick);
                }
                prev=curr;
            }
            return prev[maxWeight];
    }
}

// More spimport java.util.* ;
import java.io.*; 

public class Solution{
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {

            int[] prev=new int[maxWeight+1];

            for(int w=weight[0];w<=maxWeight;w++){
                prev[w]=value[0];
            }
            for(int index=1;index<n;index++){
                for(int j=maxWeight;j>=0;j--){
                    int notPick=0+prev[j];
                    int pick=Integer.MIN_VALUE;
                    if(weight[index]<=j){
                        pick=value[index]+prev[j-weight[index]];
                    }
                    prev[j]=Math.max(pick,notPick);
                }
            }
            return prev[maxWeight];
    }
}ace optimization
