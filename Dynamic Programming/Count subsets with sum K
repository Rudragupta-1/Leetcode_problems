import java.util.*;
import java.io.*;

public class Solution {
// func that will return count of subsets with target sum
    private static int func(int index,int target, int[][] dp,int[] arr){
        // Base case
        
        if (index == 0) {
            if (target == 0 && arr[0] == 0) return 2;
            if (target == 0 || arr[0] == target) return 1;
            return 0;
        }
        if(dp[index][target]!=-1) return dp[index][target];
        // Possible ways
        int notPick=func(index-1,target,dp,arr)%1000000007;
        int pick=0;
        if(arr[index]<=target){
        pick=func(index-1,target-arr[index],dp,arr)%1000000007;
        }
        // Sum up
        return dp[index][target]=(pick+notPick)%1000000007;
    }
    public static int findWays(int nums[], int target) {
        // Write your code here.
        int n=nums.length;
        int[][] dp=new int[n][target+1];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
        return func(n-1,target,dp,nums)%1000000007;
    }
}


// Tabulation 
import java.util.*;
import java.io.*;

public class Solution {
    // Function that returns the count of subsets with the target sum
    public static int findWays(int arr[], int target) {
        int n = arr.length;
        int[][] dp = new int[n][target + 1];
        int mod = 1000000007;

        // Base case: If index 0
        // For the sum 0, we always have one subset (the empty subset)

        // If arr[0] is less than or equal to target, we can include it as a subset
        // Base case when index = 0
        for (int j = 0; j <= target; j++) {
            if (j == 0 && arr[0] == 0) {
                dp[0][j] = 2; // Two ways: empty subset and {arr[0]}
            } else if (j == 0 || arr[0] == j) {
                dp[0][j] = 1; // One way: either empty subset or {arr[0]} matches the target
            } else {
                dp[0][j] = 0; // No valid subset
            }
        }

        for (int index = 1; index < n; index++) {
            for (int j = 0; j <= target; j++) {
                // Not picking the current element
                int notPick = dp[index - 1][j] % mod;

                // Picking the current element, only if it doesn't exceed the current sum
                int pick = 0;
                if (arr[index] <= j) {
                    pick = dp[index - 1][j - arr[index]] % mod;
                }

                // Sum up both possibilities
                dp[index][j] = (pick + notPick) % mod;
            }
        }
        
        return dp[n - 1][target];
    }
}
