import java.util.*;
public class Solution {
	public static boolean func(int i, int target , int[] arr, int[][] dp){
		if(target==0){
			return true;
		}
		if(i==0) return arr[i]==target;
		if(dp[i][target]!=-1){
			return dp[i][target]==1;
		}
		boolean notTake=func(i-1,target,arr,dp);
		boolean take=false;
		if(arr[i]<=target){
			take=func(i-1,target-arr[i],arr,dp);
		}
		dp[i][target]=(take || notTake)?1:0;
		return take || notTake;
	}
	public static boolean canPartition(int[] arr, int n) {
		// Write your code here.
		int sum=0;
		for(int i=0;i<arr.length;i++){
			sum+=arr[i];
		}
		if(sum%2!=0) return false;
		int target=sum/2;
		int[][] dp=new int[n][target+1];
		for(int[] row:dp){
			Arrays.fill(row,-1);
		}
		return func(n-1,target,arr,dp);
	}
}
// Tabulation
import java.util.*;
public class Solution {
	public static boolean canPartition(int[] arr, int n) {
		// Write your code here.
		int sum=0;
		for(int i=0;i<arr.length;i++){
			sum+=arr[i];
		}
		if(sum%2!=0) return false;
		int target=sum/2;
		boolean[][] dp=new boolean[n][target+1];
		for(int i=0;i<n;i++){
			dp[i][0]=true;
		}
		if(arr[0]<=target){
			dp[0][arr[0]]=true;
		}
		for(int i=1;i<n;i++){
			for(int j=1;j<=target;j++){
				boolean notTake=dp[i-1][j];
				boolean take=false;
				if(arr[i]<=j){
					take=dp[i-1][j-arr[i]];
				}
				dp[i][j]=(take || notTake);
			}
		}
		return dp[n-1][target];
	}
}
