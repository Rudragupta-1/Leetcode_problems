class Solution {

    public int func(int r1, int c1, int r2, int c2, int[][] grid, int n, int m, int[][][][] dp) {
        if (r1 >= n || r2 >= n || c1 >= m || c2 >= m || grid[r1][c1] == -1 || grid[r2][c2] == -1) {
            return Integer.MIN_VALUE;
        }
        if (r1==r2 && c1==c2 && r1 == n - 1 && c1 == m - 1) {
                return  grid[r1][c1];

            }
        if (dp[r1][c1][r2][c2] != -1)
            return dp[r1][c1][r2][c2];
        int cherries = 0;
        if (r1 == r2 && c1 == c2) {
            cherries = grid[r1][c1];
           
        } else {
            cherries = grid[r1][c1] + grid[r2][c2];
           
        }
        int a = func(r1, c1 + 1, r2, c2 + 1, grid, n, m, dp);
        int b = func(r1 + 1, c1, r2 + 1, c2, grid, n, m, dp);
        int c = func(r1, c1 + 1, r2 + 1, c2, grid, n, m, dp);
        int d = func(r1 + 1, c1, r2, c2 + 1, grid, n, m, dp);
        int maxPath= Math.max(Math.max(a, b), Math.max(c, d));
        return dp[r1][c1][r2][c2]=(maxPath==Integer.MIN_VALUE)?Integer.MIN_VALUE:cherries+maxPath;
    }

    public int cherryPickup(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int[][][][] dp = new int[n][m][n][m];
        for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            for (int k = 0; k < n; k++) {
                Arrays.fill(dp[i][j][k], -1);
            }
        }
    }
        int res= func(0, 0, 0, 0, grid, n, m, dp);
        return (res==Integer.MIN_VALUE)?0:res;
    }
}
