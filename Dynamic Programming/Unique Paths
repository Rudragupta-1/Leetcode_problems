// This is the recursive approach and will give TLE.

// class Solution {
//     public int find(int m, int n){
//         if(m==0 || n==0){
//             return 1;
//         }
//         if(m<0 || n<0) return 0;
//         return find(m-1,n)+find(m,n-1);
//     }
//     public int uniquePaths(int m, int n) {
//         return find(m-1,n-1);
//     }
// }

// This is the DP approach.

// class Solution {
//     public int find(int m, int n, int[][] dp){
//         if(m==0 || n==0){
//             return 1;
//         }
//         if(m<0 || n<0) return 0;
//         if(dp[m][n]!=-1) return dp[m][n];
//         return dp[m][n] = find(m-1,n,dp)+find(m,n-1,dp);
//     }
//     public int uniquePaths(int m, int n) {
//         int[][] dp=new int[m][n];
//         for(int row[]:dp){
//             Arrays.fill(row,-1);
//         }
//         return find(m-1,n-1,dp);
//     }
// }

// Now I will do the DP Tabulation.

// class Solution {
//     public int uniquePaths(int m, int n) {
//         int[][] dp = new int[m][n];
//         for (int i = 0; i < m; i++) {

//             for (int j = 0; j < n; j++) {
//                 if (i == 0 && j == 0) {
//                     dp[i][j] = 1;
//                 } else {
//                     int up = 0;
//                     int left = 0;
//                     if (i > 0)
//                         up = dp[i - 1][j];
//                     if (j > 0)
//                         left = dp[i][j - 1];
//                     dp[i][j] = up + left;
//                 }
//             }
//         }
//         return dp[m - 1][n - 1];
//     }
// }

// Now I will do the DP space optimised approach.

// class Solution {
//     public int uniquePaths(int m, int n) {
//         int[]prev = new int[n];
//         for (int i = 0; i < m; i++) {
//             int[] curr=new int[n];
//             for (int j = 0; j < n; j++) {
//                 if (i == 0 && j == 0) {
//                     curr[j] = 1;
//                 } else {
//                     int up = 0;
//                     int left = 0;
//                     if (i > 0)
//                         up = prev[j];
//                     if (j > 0)
//                         left = curr[j - 1];
//                     curr[j] = up + left;
//                 }
//             }
//             prev=curr;
//         }
//         return prev[n - 1];
//     }
// }
