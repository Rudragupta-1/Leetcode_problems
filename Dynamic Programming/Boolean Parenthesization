//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0){
            int N = Integer.parseInt(in.readLine());
            String S = in.readLine();
            
            Solution ob = new Solution();
            System.out.println(ob.countWays(N, S));
        
System.out.println("~");
}
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution{
    static final int mod=1003;
    static int func(int i , int j ,int isTrue, String s,int[][][] dp){
        if(i>j) return 0;
        if(i==j){
            if(isTrue==1) return s.charAt(i)=='T'?1:0;
            else return s.charAt(i)=='F'?1:0;
        }
        if(dp[i][j][isTrue]!=-1) return dp[i][j][isTrue];
        int ways=0;
        for(int k=i+1;k<=j-1;k+=2){
            int lt=func(i,k-1,1,s,dp);
            int lf=func(i,k-1,0,s,dp);
            int rt=func(k+1,j,1,s,dp);
            int rf=func(k+1,j,0,s,dp);
            char c=s.charAt(k);
            if(c=='&'){
                if(isTrue==1){
                    ways+=(lt*rt)%mod;
                }
                else{
                    ways+=((lt*rf)%mod+(lf*rt)%mod+(lf*rf)%mod)%mod;
                }
            }
            else if(c=='|'){
                if(isTrue==1){
                    ways+=((lt*rt)%mod+ (lt*rf)%mod+(lf*rt)%mod)%mod;
                }
                else{
                    ways+=(lf*rf)%mod;
                }
            }
            else{
                if(isTrue==1){
                    ways+=((lf*rt)%mod+ (lt*rf)%mod)%mod;
                }
                else{
                    ways+=((lf*rf)%mod+(lt*rt)%mod)%mod;
                }
            }
        }
        dp[i][j][isTrue]=ways%mod;
        return ways%mod;
    }
    static int countWays(int n, String s){
        // code here
        int[][][] dp=new int[n][n][2];
        for(int[][] x:dp){
            for(int[] y:x){
                Arrays.fill(y,-1);
            }
        }
        return func(0,n-1,1,s,dp);
    }
}
