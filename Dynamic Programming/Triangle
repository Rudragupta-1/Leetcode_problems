// DP approach
// class Solution {
//     public int func(int i , int j ,List<List<Integer>> triangle,int n ,int[][] dp){
//         if(i==n-1) return triangle.get(i).get(j);
//         if(dp[i][j]!=-1) return dp[i][j];
//         int down=triangle.get(i).get(j)+func(i+1,j,triangle,n,dp);
//         int diagonal=triangle.get(i).get(j)+func(i+1, j+1, triangle,n,dp);
//         return dp[i][j]=Math.min(down, diagonal);
//     }
//     public int minimumTotal(List<List<Integer>> triangle) {
//         int n=triangle.size();
//         int[][] dp=new int[n][n];
//         for(int[] row:dp){
//             Arrays.fill(row,-1);
//         }
//         return func(0,0,triangle,n,dp);
//     }
// }

// DP Tabulation approach
// class Solution {
//     public int minimumTotal(List<List<Integer>> triangle) {
//         int n = triangle.size();
//         int[][] dp = new int[n][n];
//         for (int j = 0; j < n; j++) {
//             dp[n - 1][j] = triangle.get(n - 1).get(j);
//         }
//         for (int i = n - 2; i >= 0; i--) {
//             for (int j = i; j >= 0; j--) {
//                 int down = triangle.get(i).get(j) + dp[i+1][j];
//                 int diagonal = triangle.get(i).get(j) + dp[i+1][j+1];
//                 dp[i][j] = Math.min(down, diagonal);
//             }
//         }
//         return dp[0][0];
//     }
// }

// Space optimised approach

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int n = triangle.size();
        int[] prev = new int[n];
        for (int j = 0; j < n; j++) {
            prev[j] = triangle.get(n - 1).get(j);
        }
        for (int i = n - 2; i >= 0; i--) {
             int[] curr = new int[n];
            for (int j = i; j >= 0; j--) {
                int down = triangle.get(i).get(j) + prev[j];
                int diagonal = triangle.get(i).get(j) + prev[j+1];
                curr[j] = Math.min(down, diagonal);
            }
            prev=curr;
        }
        return prev[0];
    }
}
