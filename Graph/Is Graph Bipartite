class Solution {
    public boolean dfs(int node, int col, int[] colors,ArrayList<ArrayList<Integer>> adj){
        colors[node]=col;
        for(int it : adj.get(node)){
            if(colors[it]==-1){
            if(!dfs(it,1-col,colors,adj)){
                return false;
            }
            }
            else if(colors[it]==col){
                return false;
            }
        }
        return true;
    }
    public boolean isBipartite(int[][] graph) {
        int n=graph.length;
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>(n);
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<graph[i].length;j++){
                adj.get(i).add(graph[i][j]);
            }
        }
        int colors[]=new int[n];
        for(int i=0;i<n;i++){
            colors[i]=-1;
        }
        for(int i=0;i<n;i++){
            if(colors[i]==-1){
                if(!dfs(i,0,colors,adj)){
                    return false;
                }
            }
        }
        return true;
    }
}
