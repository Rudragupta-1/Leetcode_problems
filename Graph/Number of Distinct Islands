// User function Template for Java
class Pair{
    int row;
    int col;
    public Pair(int row,int col){
        this.row=row;
        this.col=col;
    }
}
class Solution {

    private void bfs(int[][] vis,int[][]grid, int i,int j,ArrayList<Pair> l)
{
    int n=grid.length;
    int m=grid[0].length;
    vis[i][j]=1;
    Queue<Pair> q=new LinkedList<Pair>();
    q.add(new Pair(i,j));
    while(!q.isEmpty()){
        int r=q.peek().row;
        int c=q.peek().col;
        q.remove();
        l.add(toString(r-i,c-j));
        int[] dr={-1,0,1,0};
        int[] dc={0,1,0,-1};
        for(int k=0;k<4;k++){
            int nr=r+dr[k];
            int nc=c+dc[k];
            if(nr>=0 && nc>=0 && nr<n && nc<m && vis[nr][nc]==0 && grid[nr][nc]==1){
                vis[nr][nc]=1;
                q.add(new Pair(nr,nc));
            }
        }
    }
}
private String toString(int r,int c){
    return Integer.toString(r)+" "+Integer.toString(c);
}

    int countDistinctIslands(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        int vis[][]=new int[n][m];
        HashSet<ArrayList<String> set=new HashSet<>();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(vis[i][j]==0 && grid[i][j]==1){
                ArrayList<String> l=new ArrayList<>();
                    bfs(vis,grid,i,j,l);
                    set.add(l);
                }
            }
        }
        return set.size();
    }
}
