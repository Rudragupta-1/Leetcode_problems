class DisjointSet {
    List<Integer> rank = new ArrayList<>();
    List<Integer> parent = new ArrayList<>();
    List<Integer> size = new ArrayList<>();
    public DisjointSet(int n) {
        for (int i = 0; i <= n; i++) {
            rank.add(0);
            parent.add(i);
            size.add(1);
        }
    }

    public int findUPar(int node) {
        if (node == parent.get(node)) {
            return node;
        }
        int ulp = findUPar(parent.get(node));
        parent.set(node, ulp);
        return parent.get(node);
    }

    public void unionByRank(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (rank.get(ulp_u) < rank.get(ulp_v)) {
            parent.set(ulp_u, ulp_v);
        } else if (rank.get(ulp_v) < rank.get(ulp_u)) {
            parent.set(ulp_v, ulp_u);
        } else {
            parent.set(ulp_v, ulp_u);
            int rankU = rank.get(ulp_u);
            rank.set(ulp_u, rankU + 1);
        }
    }

    public void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (size.get(ulp_u) < size.get(ulp_v)) {
            parent.set(ulp_u, ulp_v);
            size.set(ulp_v, size.get(ulp_v) + size.get(ulp_u));
        } else {
            parent.set(ulp_v, ulp_u);
            size.set(ulp_u, size.get(ulp_u) + size.get(ulp_v));
        }
    }
}
class Solution {
    public boolean isValid(int r, int c, int n){
        if(r>=0 && c>=0 && r<n && c<n){
            return true;
        }
        else return false;
    }
    public int largestIsland(int[][] grid) {
        int n=grid.length;
        DisjointSet ds=new DisjointSet(n*n);
        int dr[]={-1,0,1,0};
        int dc[]={0,1,0,-1};
        //step-1 phle sab islands ka union kr lo
        for(int row=0;row<n;row++){
            for(int col=0;col<n;col++){
                if(grid[row][col]==0){
                    continue;
                }
                for(int i=0;i<4;i++){
                    int adjR=row+dr[i];
                    int adjC=col+dc[i];
                    if(isValid(adjR,adjC,n) && grid[adjR][adjC]==1){
                        int adjNodeNo=adjR*n+adjC;
                        int nodeNo=row*n+col;
                        ds.unionBySize(adjNodeNo,nodeNo);
                    }
                }
            }
        }
        //step-2 ab ham ek ek krke zero ko 1 krege aur compute krege size
        int maxSize=0;
        for(int row=0;row<n;row++){
            for(int col=0;col<n;col++){
                if(grid[row][col]==1) {continue; } // ab 0 pe hi focus krna hai
                Set<Integer> parents=new HashSet<>();
                for(int i=0;i<4;i++){
                    int adjR=row+dr[i];
                    int adjC=col+dc[i];
                    if(isValid(adjR,adjC,n) && grid[adjR][adjC]==1){
                        parents.add(ds.findUPar(adjR*n+adjC));
                    }
                }
                int s=0;
                for(Integer parent:parents){
                    s+=ds.size.get(parent);
                }
                maxSize=Math.max(maxSize,s+1);
            }
        }
        for(int cell=0;cell<n*n;cell++){
            maxSize=Math.max(maxSize,ds.size.get(ds.findUPar(cell)));
        }
        return maxSize;
    }
}
