class DisjointSet {
    List<Integer> rank = new ArrayList<>();
    List<Integer> parent = new ArrayList<>();
    List<Integer> size = new ArrayList<>();
    public DisjointSet(int n) {
        for (int i = 0; i <= n; i++) {
            rank.add(0);
            parent.add(i);
            size.add(1);
        }
    }

    public int findUPar(int node) {
        if (node == parent.get(node)) {
            return node;
        }
        int ulp = findUPar(parent.get(node));
        parent.set(node, ulp);
        return parent.get(node);
    }

    public void unionByRank(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (rank.get(ulp_u) < rank.get(ulp_v)) {
            parent.set(ulp_u, ulp_v);
        } else if (rank.get(ulp_v) < rank.get(ulp_u)) {
            parent.set(ulp_v, ulp_u);
        } else {
            parent.set(ulp_v, ulp_u);
            int rankU = rank.get(ulp_u);
            rank.set(ulp_u, rankU + 1);
        }
    }

    public void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (size.get(ulp_u) < size.get(ulp_v)) {
            parent.set(ulp_u, ulp_v);
            size.set(ulp_v, size.get(ulp_v) + size.get(ulp_u));
        } else {
            parent.set(ulp_v, ulp_u);
            size.set(ulp_u, size.get(ulp_u) + size.get(ulp_v));
        }
    }
}
class Solution {
    public boolean isValid(int r, int c , int n, int m){
        if(r>=0 && c>=0 && r<n && c<m){
            return true;
        }
        return false;
    }
    public List<Integer> numOfIslands(int rows, int cols, int[][] operators) {
        //Your code here
        List<Integer> ans=new ArrayList<>();
        DisjointSet ds=new DisjointSet(rows*cols);
        int[][] vis=new int[rows][cols];
        int count=0;
        for(int i=0;i<operators.length;i++){
            int row=operators[i][0];
            int col=operators[i][1];
            if(vis[row][col]==1) {ans.add(count);continue;}
            vis[row][col]=1;
            count++;
            int[] dr={-1,0,1,0};
            int[] dc={0,1,0,-1};
            for(int ii=0;ii<4;ii++){
                int adjR=row+dr[ii];
                int adjC=col+dc[ii];
                if(isValid(adjR,adjC,rows,cols)){
                    if(vis[adjR][adjC]==1){
                        int nodeNo=row*cols+col;
                        int adjNodeNo=adjR*cols+adjC;
                        if(ds.findUPar(nodeNo)!=ds.findUPar(adjNodeNo)){
                            count--;
                            ds.unionBySize(nodeNo,adjNodeNo);
                        }
                    }
                }
            }
            ans.add(count);
        }
        return ans;
    }
    
}
