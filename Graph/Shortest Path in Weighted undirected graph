class Pair {
    int first;
    int second;

    public Pair(int _first, int _second) {
        this.first = _first;
        this.second = _second;
    }
}

class Solution {
    public List<Integer> shortestPath(int n, int m, int edges[][]) {
        // Initialize adjacency list
        List<List<Pair>> adj = new ArrayList<>();
        for (int i = 0; i <= n; i++) {
            adj.add(new ArrayList<>());
        }
        
        // Build graph
        for (int i = 0; i < m; i++) {
            adj.get(edges[i][0]).add(new Pair(edges[i][1], edges[i][2]));
            adj.get(edges[i][1]).add(new Pair(edges[i][0], edges[i][2]));
        }

        // Priority queue for Dijkstra's algorithm
        PriorityQueue<Pair> pq = new PriorityQueue<Pair>((x, y) -> x.first - y.first);
        
        // Initialize distance and parent arrays
        int dist[] = new int[n + 1];
        int parent[] = new int[n + 1];
        Arrays.fill(dist, Integer.MAX_VALUE);
         Arrays.fill(parent, -1);
        dist[1] = 0;
        
        pq.add(new Pair(0, 1));

        // Dijkstra's algorithm
        while (!pq.isEmpty()) {
            int dis = pq.peek().first;
            int node = pq.peek().second;
            pq.remove();

            for (Pair it : adj.get(node)) {
                int adjNode = it.first;
                int edgeWt = it.second;

                if (dis + edgeWt < dist[adjNode]) {
                    dist[adjNode] = dis + edgeWt;
                    pq.add(new Pair(dist[adjNode], adjNode));
                    parent[adjNode] = node;
                }
            }
        }

        if (dist[n] == Integer.MAX_VALUE) {
            return Collections.singletonList(-1);
        }
        List<Integer> path = new ArrayList<>();
        for (int at = n; at != -1; at = parent[at]) {
            path.add(at);
        }
        Collections.reverse(path);
        path.add(0, dist[n]);

        return path;
    }
}
