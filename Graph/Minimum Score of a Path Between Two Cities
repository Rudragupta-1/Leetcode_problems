class Pair{
    int node;
    int weight;
    public Pair(int node , int weight){
        this.node=node;
        this.weight=weight;
    }
}
    class Solution {
        int score=Integer.MAX_VALUE;
public void dfs(boolean vis[] , List<List<Pair>> adj , int node){
    for(Pair it:adj.get(node)){
        int neighbor=it.node;
        int weight=it.weight;
        score=Math.min(score,weight);
        if(!vis[neighbor]){
            vis[neighbor]=true;
            dfs(vis,adj,neighbor);
        }
    }
}
    public int minScore(int n, int[][] roads) {
    List<List<Pair>> adj=new ArrayList<>();
    for(int i=0;i<n+1;i++){
        adj.add(new ArrayList<>());
    }
    for(int i=0;i<roads.length;i++){
        int u=roads[i][0];
        int v=roads[i][1];
        int w=roads[i][2];
        adj.get(u).add(new Pair(v,w));
        adj.get(v).add(new Pair(u,w));
    }
    boolean vis[]=new boolean[n+1];
    vis[1]=true;
    dfs(vis,adj,1);
    return score;
    }
}
