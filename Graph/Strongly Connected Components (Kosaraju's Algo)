//User function Template for Java


class Solution
{
    public void dfs(Stack<Integer> st, int[] vis,ArrayList<ArrayList<Integer>> adj, int node ){
        vis[node]=1;
        for(int it:adj.get(node)){
            if(vis[it]==0)
            dfs(st,vis,adj,it);
        }
        st.push(node);
    }
    public void revDfs(int node , ArrayList<ArrayList<Integer>> transpose, int[] vis){
        vis[node]=1;
        for(int it:transpose.get(node)){
            if(vis[it]==0)
            revDfs(it,transpose, vis);
        }
        
    }
    //Function to find number of strongly connected components in the graph.
    public int kosaraju(int V, ArrayList<ArrayList<Integer>> adj)
    {
        //code here
        int vis[]=new int[V];
        Stack<Integer> st=new Stack<>();
        for(int i=0;i<V;i++){
            if(vis[i]==0){
                dfs(st,vis,adj,i);
            }
        }
        ArrayList<ArrayList<Integer>> transpose=new ArrayList<>();
        for(int i=0;i<V;i++){
            transpose.add(new ArrayList<>());
        }
        for(int i=0;i<V;i++){
            vis[i]=0;
            for(Integer it:adj.get(i)){
                transpose.get(it).add(i);
            }
        }
        int ans=0;
        while(st.size()>0){
            int node=st.pop();
            if(vis[node]==0){
                ans++;
                revDfs(node, transpose, vis);
            }
        }
        return ans;
    }
}
