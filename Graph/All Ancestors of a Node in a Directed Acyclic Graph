class Solution {
    public void dfs(int node , List<List<Integer>> adj, boolean vis[], List<Integer> l){
        vis[node]=true;
        for(int it:adj.get(node)){
            if(!vis[it]){
                l.add(it);
                dfs(it, adj , vis, l);
            }
        }
    }
    public List<List<Integer>> getAncestors(int n, int[][] edges) {
        List<List<Integer>> adj=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<edges.length;i++){
            int u=edges[i][0];
            int v=edges[i][1];
            adj.get(v).add(u);
        }
        List<List<Integer>> ll=new ArrayList<>();
        for(int i=0;i<n;i++){
        boolean vis[]=new boolean[n];
        List<Integer> l=new ArrayList<>();
        dfs(i,adj,vis,l);
        Collections.sort(l);
        ll.add(l);
        }
        return ll;
    }
}
