class Pair{
    String first;
    int second;
    public Pair(String _first, int _second){
        this.first=_first;
        this.second=_second;
    }
}
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> st=new HashSet<>(wordList);
        st.remove(beginWord);
        Queue<Pair> q=new LinkedList<Pair>();
        q.add(new Pair(beginWord,1));
        while(!q.isEmpty()){
            String word=q.peek().first;
            int level=q.peek().second;
            q.remove();
            if(word.equals(endWord)){
                return level;
            }
            for(int i=0;i<word.length();i++){
                for(char c='a';c<='z';c++){
                    char crr[]=word.toCharArray();
                    crr[i]=c;
                    String replaced=new String(crr);
                    if(st.contains(replaced)){
                        st.remove(replaced);
                        q.add(new Pair(replaced,level+1));
                    }
                }
            }
        }
        return 0;
    }
}
