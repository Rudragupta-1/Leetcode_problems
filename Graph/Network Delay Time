class Pair implements Comparable<Pair>{
    int node;
    int time;
    public Pair(int node , int time){
        this.node=node;
        this.time=time;
    }
    @Override
    public int compareTo(Pair other) {
        return Integer.compare(this.time, other.time);
    }
}
class Solution {
    public int networkDelayTime(int[][] times, int n, int k) {
        PriorityQueue<Pair> pq=new PriorityQueue<>();
        boolean vis[]=new boolean[n+1];
        List<List<Pair>> adj=new ArrayList<>();
        for(int i=0;i<n+1;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<times.length;i++){
            int a=times[i][0];
            int b=times[i][1];
            int weight=times[i][2];
            adj.get(a).add(new Pair(b,weight));
        }
        int delay=0;
        pq.offer(new Pair(k,0));
        while(!pq.isEmpty()){
            Pair current=pq.poll();
            int node=current.node;
            int time=current.time;
            if(vis[node]) continue;
            vis[node]=true;
            delay=Math.max(delay,time);
            for(Pair it:adj.get(node)){
                if(!vis[it.node]){
                    pq.offer(new Pair(it.node, time+it.time));
                }
            }
        }
        for(int i=1;i<=n;i++){
            if(vis[i]==false){
                return -1;
            }
        }
        return delay;
    }
}
