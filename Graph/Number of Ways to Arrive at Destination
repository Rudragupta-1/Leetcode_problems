import java.util.*;

class Pair {
    long first;int second;

    public Pair(long first, int second) {
        this.first = first;
        this.second = second;
    }
}

class Solution {
    public int countPaths(int n, int[][] roads) {
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        int mod = (int) (1e9 + 7);
        int[] ways = new int[n];
        long[] dist = new long[n];
        for(int i=0;i<n;i++){
            dist[i]=Long.MAX_VALUE;
            ways[i]=0;
        }
        for (int i = 0; i < roads.length; i++) {
            adj.get(roads[i][0]).add(new Pair(roads[i][1], roads[i][2]));
            adj.get(roads[i][1]).add(new Pair(roads[i][0], roads[i][2]));
        }

        PriorityQueue<Pair> q = new PriorityQueue<>((x, y) -> Long.compare(x.first, y.first));
        q.add(new Pair(0, 0));
        dist[0] = 0;
        ways[0] = 1;
        while (!q.isEmpty()) {
            Pair current = q.poll();
            long dis = current.first;
            int node = current.second;

            for (Pair it : adj.get(node)) {
                long adjNode = it.first;
                long wt = it.second;
                if (dis + wt < dist[(int)adjNode]) {
                    dist[(int)adjNode] = dis + wt;
                    q.add(new Pair(dis + wt, (int)adjNode));
                    ways[(int)adjNode] = ways[node];
                } else if (dis + wt == dist[(int)adjNode]) {
                    ways[(int)adjNode] = (ways[(int)adjNode] + ways[(int)node]) % mod;
                }
            }
        }
        return ways[n - 1] % mod;
    }
}
