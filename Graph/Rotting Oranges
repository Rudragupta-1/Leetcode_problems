class Pair{
    int row;
    int col;
    int time;
    Pair(int _row,int _col,int _time){
        this.row=_row;
        this.col=_col;
        this.time=_time;
    }
}
class Solution {
    public int orangesRotting(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        int[][] vis=new int[n][m];
        Queue<Pair> q=new LinkedList<Pair>();
        int c=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if (grid[i][j]==2){
                    q.add(new Pair(i,j,0));
                    vis[i][j]=2;
                }
                else{
                    vis[i][j]=0;
                }
                if(grid[i][j]==1){
                    c++;
                }
                
            }
        }
        int cf=0;
        int time=0;
        int dr[]={-1,0,1,0};
        int dc[]={0,1,0,-1};
        while(!q.isEmpty()){
            int roo=q.peek().row;
            int coo=q.peek().col;
            int t=q.peek().time;
            q.remove();
            time=Math.max(time,t);
            for(int i=0;i<4;i++){
                int nr=roo+dr[i];
                int nc=coo+dc[i];
                if(nr>=0 && nc>=0 && nr<n && nc<m && grid[nr][nc]==1 && vis[nr][nc]==0){
                    q.add(new Pair(nr,nc,time+1));
                    vis[nr][nc]=2;
                    cf++;
                }
            }
        }
        if(c!=cf) return -1;
        return time;
    }
}
