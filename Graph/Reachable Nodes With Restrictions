class Solution {
    int count=0;
    public void dfs(int node,List<List<Integer>> adj, boolean[] vis,Set<Integer> res){
        vis[node]=true;
                count++;
        for(int it:adj.get(node)){
            if(!vis[it] && !res.contains(it) ){
                dfs(it,adj,vis,res);
            }
        }
    }
    public int reachableNodes(int n, int[][] edges, int[] restricted) {
        List<List<Integer>> adj=new ArrayList<>();
        boolean vis[]=new boolean[n];
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        Set<Integer> res=new HashSet<>();
        for(int x:restricted){
            res.add(x);
        }
        for(int i=0;i<edges.length;i++){
            int u=edges[i][0];
            int v=edges[i][1];
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        dfs(0,adj,vis,res);
        return count;
    }
}
