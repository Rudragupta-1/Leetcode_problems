class Tuple{
    int dist,row,col;
    public Tuple(int dist, int row , int col){
        this.dist=dist;
        this.row=row;
        this.col=col;
    }
}
class Solution {
    public int minimumEffortPath(int[][] heights) {
        PriorityQueue<Tuple> q=new PriorityQueue<>((x,y)->(x.dist-y.dist));
        int n=heights.length;
        int m=heights[0].length;
        int dist[][]=new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                dist[i][j]=Integer.MAX_VALUE;
            }
        }
        dist[0][0]=0;
        int dr[]={-1,0,1,0};
        int dc[]={0,1,0,-1};
        q.add(new Tuple(0,0,0));
        while(!q.isEmpty()){
            int diff=q.peek().dist;
            int row=q.peek().row;
            int col=q.peek().col;
            q.remove();
            if(row==n-1 && col==m-1) return diff;
            for(int i=0;i<4;i++){
                int nr=row+dr[i];
                int nc=col+dc[i];
                if(nr>=0 && nc>=0 && nr<n && nc<m){
            int newEffort=Math.max(Math.abs(heights[row][col]-heights[nr][nc]),diff);
            if(newEffort<dist[nr][nc]){
                dist[nr][nc]=newEffort;
                q.add(new Tuple(newEffort,nr,nc));
            }
            }
        }
        }
        return 0;
    }
}
