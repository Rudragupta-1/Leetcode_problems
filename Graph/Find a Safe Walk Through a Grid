import java.util.*;

class Solution {
    public boolean findSafeWalk(List<List<Integer>> grid, int health) {
        int m = grid.size();
        int n = grid.get(0).size();
        
        int[][] directions = { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } };

        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[] { 0, 0, health });

        boolean[][][] visited = new boolean[m][n][health + 1];
        visited[0][0][health] = true;

        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            int row = current[0];
            int col = current[1];
            int currentHealth = current[2];

            currentHealth -= grid.get(row).get(col);

            if (currentHealth <= 0) {
                continue;
            }

            if (row == m - 1 && col == n - 1) {
                return true;
            }

            for (int[] dir : directions) {
                int newRow = row + dir[0];
                int newCol = col + dir[1];

                if (newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && !visited[newRow][newCol][currentHealth]) {
                    queue.offer(new int[] { newRow, newCol, currentHealth });
                    visited[newRow][newCol][currentHealth] = true;
                }
            }
        }

        return false;
    }
}
