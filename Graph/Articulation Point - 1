// HARD
class Solution
{
    private int timer=1;
    public void dfs(int node,int parent ,int[] vis,int[] tim,int[] low,int[] mark,ArrayList<ArrayList<Integer>> adj){
        vis[node]=1;
        low[node]=tim[node]=timer++;
        int child=0;
        for(int it:adj.get(node)){
            if(vis[it]==0){
                dfs(it,node , vis,tim,low,mark,adj);
                low[node]=Math.min(low[node],low[it]);
                if(low[it]>=tim[node] && parent!=-1){
                    mark[node]=1;
                }
                child++;
            }else{
                low[node]=Math.min(low[node],tim[it]);
            }
            if(parent==-1 && child>1){
                mark[node]=1;
            }
        }
    }
    //Function to return Breadth First Traversal of given graph.
    public ArrayList<Integer> articulationPoints(int V,ArrayList<ArrayList<Integer>> adj)
    {
        // Code here
        int vis[]=new int[V];
        int tim[]=new int[V];
        int low[]=new int[V];
        int mark[]=new int[V];
        for(int i=0;i<V;i++){
            if(vis[i]==0){
                dfs(i,-1,vis,tim,low,mark,adj);
            }
        }
        ArrayList<Integer> ans=new ArrayList<>();
        for(int i=0;i<V;i++){
            if(mark[i]==1){
                ans.add(i);
            }
        }
        if(ans.size()==0) ans.add(-1);
        return ans;
    }
}
