class Pair{
    int row,col;
    public Pair(int _row, int _col){
        this.row=_row;
        this.col=_col;
    }
}
class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        if(grid[0][0]==1 || grid[n-1][m-1]==1) return -1;
        Queue<Pair> q=new LinkedList<>();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1){
                    grid[i][j]=-1;
                }
                else grid[i][j]=Integer.MAX_VALUE;
            }
        }
        int ans=Integer.MAX_VALUE;
        grid[0][0]=1;
        q.add(new Pair(0,0));
        int[] dr={0,-1,-1,-1,0,1,1,1};
        int[] dc={-1,-1,0,1,1,1,0,-1};
        while(!q.isEmpty()){
            int row=q.peek().row;
            int col=q.peek().col;
            q.remove();
            if(row==n-1 && col==m-1){
                ans=Math.min(ans,grid[row][col]);
            }
            for(int i=0;i<8;i++){
                int nr=row+dr[i];
                int nc=col+dc[i];
                if(nr>=0 && nc>=0 && nr <n && nc<m && grid[nr][nc]!=-1){
                    if(grid[nr][nc]>grid[row][col]+1){
                        grid[nr][nc]=grid[row][col]+1;
                        q.add(new Pair(nr,nc));
                    }
                }
            }
        }
        return ans==Integer.MAX_VALUE?-1:ans;
    }
}
