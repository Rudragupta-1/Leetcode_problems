/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int[] nodesBetweenCriticalPoints(ListNode head) {
        // Map<Integer,Integer> map=new HashMap<>();
        int l=0;
        ListNode curr=head;
        while(curr!=null){
            l++;
            curr=curr.next;
        }
        if(l<=2){
            return new int[]{-1,-1};
        }
        curr=head.next;
        ListNode prev=head;
        int i=0;
        List<Integer> l1=new ArrayList<>();
        while(curr.next!=null){
            i++;
            if((curr.val<prev.val && curr.val<curr.next.val) || (curr.val>prev.val && curr.val>curr.next.val)){
                l1.add(i);
            }
            prev=curr;
            curr=curr.next;
        }
        Collections.sort(l1);
        int n=l1.size();
        if(n<=1){
            return new int[]{-1,-1};
        }
        int min=Integer.MAX_VALUE;
        for(int ii=1;ii<n;ii++){
            min=Math.min(min,l1.get(ii)-l1.get(ii-1));
        }
        int max=l1.get(n-1)-l1.get(0);
        return new int[]{min,max};
    }
}
