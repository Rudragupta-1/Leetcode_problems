/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void function(List<String> l, StringBuilder sb, TreeNode root){
        int len=sb.length();
         if(root.left==null && root.right==null){
            sb.append(root.val);
            l.add(sb.toString());
         }
         else {
            sb.append(root.val).append("->");
         }
         if(root.left!=null){
            function(l,sb,root.left);
         }
         if(root.right!=null){
            function(l,sb,root.right);
         }
            sb.setLength(len);
    }
    public List<String> binaryTreePaths(TreeNode root) {
    List<String> l=new ArrayList<>();
    StringBuilder sb=new StringBuilder();
        function(l,sb,root);
        return l;
    }
}
