//{ Driver Code Starts
import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            int N = Integer.parseInt(read.readLine());
            
            ArrayList<ArrayList<Integer>> arr = new ArrayList<>();
            
            for(int i=0; i<N-1; i++)
            {
                ArrayList<Integer> temp = new ArrayList<>();
                String S[] = read.readLine().split(" ");
                temp.add(Integer.parseInt(S[0]));
                temp.add(Integer.parseInt(S[1]));
                arr.add(temp);
            }

            Solution ob = new Solution();
            System.out.println(ob.maxBinTreeGCD(arr,N));
        }
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution {
    static int gcd(int a , int b){
        if(a==0) return b;
        if(b==0) return a;
        if(a==b) return a;
        if(a>b)  return gcd(a-b,b);
        return gcd(a,b-a);
    }
    static int maxBinTreeGCD(ArrayList<ArrayList<Integer>> arr, int N) {
        // code here
        List<List<Integer>> l=new ArrayList<>(100001);
        for(int i=0;i<100001;i++) l.add(new ArrayList<>());
        for(List<Integer> x:arr){
            int u=x.get(0);
            int v=x.get(1);
            l.get(u).add(v);
        }
        int max=0;
        for(int i=0;i<100001;i++){
            if(l.get(i).size()==2){
                max=Math.max(max,gcd(l.get(i).get(0),l.get(i).get(1)));
            }
        }
        return max;
    }
};
