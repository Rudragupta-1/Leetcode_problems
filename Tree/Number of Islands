class Solution {
    public void bfs(int i , int j , int[][] vis,char[][] grid){
        vis[i][j]=1;
        Queue<Pair> q=new LinkedList<Pair>();
        q.add(new Pair(i,j));
        int n=grid.length;
        int m=grid[0].length;
        while(!q.isEmpty()){
            int row=q.peek().first;
            int col=q.peek().second;
            q.remove();
            for(int k=0;k<4;k++){
                int delRow[]={-1,0,1,0};
                int delCol[]={0,-1,0,1};
                    int nr=row+delRow[k];
                    int nc=col+delCol[k];
                    if(nr>=0 && nr<n && nc>=0 && nc<m && grid[nr][nc]=='1' && vis[nr][nc]==0){
                        vis[nr][nc]=1;
                        q.add(new Pair(nr,nc));
                    }
                
            }
        }
    }
    public int numIslands(char[][] grid) {
        int c=0;
        int n=grid.length;
        int m=grid[0].length;
        int vis[][]=new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]=='1' && vis[i][j]==0){
                    bfs(i,j,vis,grid);
                    c++;
                }
            }
        }
        return c;
    }
    class Pair{
        int first;
        int second;
        public Pair(int first , int second){
            this.first=first;
            this.second=second;
        }
    }
}
